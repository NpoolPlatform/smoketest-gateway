// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/smoketest-gateway/pkg/db/ent/detail"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   detail.Table,
			Columns: detail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: detail.FieldID,
			},
		},
		Type: "Detail",
		Fields: map[string]*sqlgraph.FieldSpec{
			detail.FieldCreatedAt:       {Type: field.TypeUint32, Column: detail.FieldCreatedAt},
			detail.FieldUpdatedAt:       {Type: field.TypeUint32, Column: detail.FieldUpdatedAt},
			detail.FieldDeletedAt:       {Type: field.TypeUint32, Column: detail.FieldDeletedAt},
			detail.FieldAppID:           {Type: field.TypeUUID, Column: detail.FieldAppID},
			detail.FieldUserID:          {Type: field.TypeUUID, Column: detail.FieldUserID},
			detail.FieldCoinTypeID:      {Type: field.TypeUUID, Column: detail.FieldCoinTypeID},
			detail.FieldIoType:          {Type: field.TypeString, Column: detail.FieldIoType},
			detail.FieldIoSubType:       {Type: field.TypeString, Column: detail.FieldIoSubType},
			detail.FieldAmount:          {Type: field.TypeOther, Column: detail.FieldAmount},
			detail.FieldFromCoinTypeID:  {Type: field.TypeUUID, Column: detail.FieldFromCoinTypeID},
			detail.FieldCoinUsdCurrency: {Type: field.TypeOther, Column: detail.FieldCoinUsdCurrency},
			detail.FieldIoExtra:         {Type: field.TypeString, Column: detail.FieldIoExtra},
			detail.FieldFromOldID:       {Type: field.TypeUUID, Column: detail.FieldFromOldID},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (dq *DetailQuery) addPredicate(pred func(s *sql.Selector)) {
	dq.predicates = append(dq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DetailQuery builder.
func (dq *DetailQuery) Filter() *DetailFilter {
	return &DetailFilter{config: dq.config, predicateAdder: dq}
}

// addPredicate implements the predicateAdder interface.
func (m *DetailMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DetailMutation builder.
func (m *DetailMutation) Filter() *DetailFilter {
	return &DetailFilter{config: m.config, predicateAdder: m}
}

// DetailFilter provides a generic filtering capability at runtime for DetailQuery.
type DetailFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DetailFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *DetailFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(detail.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *DetailFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(detail.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *DetailFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(detail.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *DetailFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(detail.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *DetailFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(detail.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *DetailFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(detail.FieldUserID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *DetailFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(detail.FieldCoinTypeID))
}

// WhereIoType applies the entql string predicate on the io_type field.
func (f *DetailFilter) WhereIoType(p entql.StringP) {
	f.Where(p.Field(detail.FieldIoType))
}

// WhereIoSubType applies the entql string predicate on the io_sub_type field.
func (f *DetailFilter) WhereIoSubType(p entql.StringP) {
	f.Where(p.Field(detail.FieldIoSubType))
}

// WhereAmount applies the entql other predicate on the amount field.
func (f *DetailFilter) WhereAmount(p entql.OtherP) {
	f.Where(p.Field(detail.FieldAmount))
}

// WhereFromCoinTypeID applies the entql [16]byte predicate on the from_coin_type_id field.
func (f *DetailFilter) WhereFromCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(detail.FieldFromCoinTypeID))
}

// WhereCoinUsdCurrency applies the entql other predicate on the coin_usd_currency field.
func (f *DetailFilter) WhereCoinUsdCurrency(p entql.OtherP) {
	f.Where(p.Field(detail.FieldCoinUsdCurrency))
}

// WhereIoExtra applies the entql string predicate on the io_extra field.
func (f *DetailFilter) WhereIoExtra(p entql.StringP) {
	f.Where(p.Field(detail.FieldIoExtra))
}

// WhereFromOldID applies the entql [16]byte predicate on the from_old_id field.
func (f *DetailFilter) WhereFromOldID(p entql.ValueP) {
	f.Where(p.Field(detail.FieldFromOldID))
}
